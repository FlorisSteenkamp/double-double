import { ddMin as ddMin_ } from './double-double/binary/dd-min';
import { ddMax as ddMax_ } from './double-double/binary/dd-max';
import { ddSqrt as ddSqrt_ } from './double-double/unary/dd-sqrt';
import { doubleSqrt as doubleSqrt_ } from './double-mixed-double-double/double-sqrt';
import { sqrtWithErr as sqrtWithErr_ } from './double-with-err/sqrt-with-err';
import { ddAbs as ddAbs_ } from './double-double/unary/dd-abs';
import { ddAddDouble as ddAddDouble_ } from './double-mixed-double-double/dd-add-double';
import { ddAddDd as ddAddDd_ } from './double-double/binary/dd-add-dd';
import { ddProduct as ddProduct_ } from './double-double/multi/dd-product';
import { ddSum as ddSum_ } from './double-double/multi/dd-sum';
import { ddCompare as ddCompare_ } from './double-double/binary/dd-compare';
import { ddDiffDd as ddDiffDd_ } from './double-double/binary/dd-diff-dd';
import { ddMultDouble1 as ddMultDouble1_, ddMultDouble2 as ddMultDouble2_ } from './double-mixed-double-double/dd-mult-double';
import { ddMultBy2 as ddMultBy2_ } from './double-double/unary/dd-mult-by-2';
import { ddMultBy4 as ddMultBy4_ } from './double-double/unary/dd-mult-by-4';
import { ddDivBy2 as ddDivBy2_ } from './double-double/unary/dd-div-by-2';
import { ddMultByNeg2 as ddMultByNeg2_ } from './double-double/unary/dd-mult-by-neg-2';
import { ddMultByNeg4 as ddMultByNeg4_ } from './double-double/unary/dd-mult-by-neg-4';
import { ddMultDd as ddMultDd_ } from './double-double/binary/dd-mult-dd';
import { ddDivDouble as ddDivDouble_ } from './double-mixed-double-double/dd-div-double';
import { ddDivDd as ddDivDd_ } from './double-double/binary/dd-div-dd';
import { ddNegativeOf as ddNegativeOf_ } from './double-double/unary/dd-negative-of';
import { ddSign as ddSign_ } from './double-double/unary/dd-sign';
import { fastTwoDiff as fastTwoDiff_ } from './basic/fast-two-diff';
import { fastTwoSum as fastTwoSum_ } from './basic/fast-two-sum';
import { split as split_ } from './basic/split';
import { twoDiff as twoDiff_ } from './basic/two-diff';
import { twoProduct as twoProduct_ } from './basic/two-product';
import { doubleDivDouble as doubleDivDouble_ } from './double-mixed-double-double/double-div-double';
import { twoSum as twoSum_ } from './basic/two-sum';
import { reduceSignificand as reduceSignificand_ } from './basic/reduce-significand';
import { parseDouble as parseDouble_, parseDoubleDetailed as parseDoubleDetailed_ } from './double-representation/parse-double';
import { isBitAligned as isBitAligned_ } from './double-representation/is-bit-aligned';
import { msbExponent as msbExponent_ } from './double-representation/msb-exponent';
import { lsbExponent as lsbExponent_ } from './double-representation/lsb-exponent';
import { bitLength as bitLength_ } from './double-representation/bit-length';
import { exponent as exponent_ } from './double-representation/exponent';
import { significand as significand_ } from './double-representation/significand';
import { doubleToBinaryString as doubleToBinaryString_ } from './double-representation/double-to-binary-string';
import { doubleToOctets as doubleToOctets_ } from './double-representation/double-to-octets';
import { getHighestSetBit as getHighestSetBit_, getLowestSetBit as getLowestSetBit_ } from './double-representation/get-max-set-bit';
import { ddDivDdWithError as ddDivDdWithError_ } from './double-double-with-error/dd-div-dd-with-error';
import { divWithErr as divWithErr_ } from './double-with-err/div-with-err';
declare const ddMultDouble2: typeof ddMultDouble2_;
declare const parseDoubleDetailed: typeof parseDoubleDetailed_;
declare const getLowestSetBit: typeof getLowestSetBit_;
declare const ddMin: typeof ddMin_;
declare const ddMax: typeof ddMax_;
declare const ddSqrt: typeof ddSqrt_;
declare const doubleSqrt: typeof doubleSqrt_;
declare const sqrtWithErr: typeof sqrtWithErr_;
declare const ddAbs: typeof ddAbs_;
declare const ddAddDouble: typeof ddAddDouble_;
declare const ddAddDd: typeof ddAddDd_;
declare const ddProduct: typeof ddProduct_;
declare const ddSum: typeof ddSum_;
declare const ddCompare: typeof ddCompare_;
declare const ddDiffDd: typeof ddDiffDd_;
declare const ddMultDouble1: typeof ddMultDouble1_;
declare const ddMultBy2: typeof ddMultBy2_;
declare const ddMultBy4: typeof ddMultBy4_;
declare const ddDivBy2: typeof ddDivBy2_;
declare const ddMultByNeg2: typeof ddMultByNeg2_;
declare const ddMultByNeg4: typeof ddMultByNeg4_;
declare const ddMultDd: typeof ddMultDd_;
declare const ddDivDouble: typeof ddDivDouble_;
declare const ddDivDd: typeof ddDivDd_;
declare const ddNegativeOf: typeof ddNegativeOf_;
declare const ddSign: typeof ddSign_;
declare const fastTwoDiff: typeof fastTwoDiff_;
declare const fastTwoSum: typeof fastTwoSum_;
declare const split: typeof split_;
declare const twoDiff: typeof twoDiff_;
declare const twoProduct: typeof twoProduct_;
declare const doubleDivDouble: typeof doubleDivDouble_;
declare const twoSum: typeof twoSum_;
declare const reduceSignificand: typeof reduceSignificand_;
declare const parseDouble: typeof parseDouble_;
declare const isBitAligned: typeof isBitAligned_;
declare const msbExponent: typeof msbExponent_;
declare const lsbExponent: typeof lsbExponent_;
declare const bitLength: typeof bitLength_;
declare const exponent: typeof exponent_;
declare const significand: typeof significand_;
declare const doubleToBinaryString: typeof doubleToBinaryString_;
declare const doubleToOctets: typeof doubleToOctets_;
declare const getHighestSetBit: typeof getHighestSetBit_;
declare const ddDivDdWithError: typeof ddDivDdWithError_;
declare const divWithErr: typeof divWithErr_;
declare const operators: {
    fastTwoDiff: typeof fastTwoDiff_;
    fastTwoSum: typeof fastTwoSum_;
    split: typeof split_;
    twoDiff: typeof twoDiff_;
    twoProduct: typeof twoProduct_;
    doubleDivDouble: typeof doubleDivDouble_;
    twoSum: typeof twoSum_;
    reduceSignificand: typeof reduceSignificand_;
    doubleSqrt: typeof doubleSqrt_;
    ddSqrt: typeof ddSqrt_;
    ddAbs: typeof ddAbs_;
    ddAddDouble: typeof ddAddDouble_;
    ddAddDd: typeof ddAddDd_;
    ddProduct: typeof ddProduct_;
    ddSum: typeof ddSum_;
    ddCompare: typeof ddCompare_;
    ddDiffDd: typeof ddDiffDd_;
    ddMultDouble1: typeof ddMultDouble1_;
    ddMultDouble2: typeof ddMultDouble2_;
    ddMultDd: typeof ddMultDd_;
    ddDivDouble: typeof ddDivDouble_;
    ddDivDd: typeof ddDivDd_;
    ddNegativeOf: typeof ddNegativeOf_;
    ddSign: typeof ddSign_;
    ddMultBy2: typeof ddMultBy2_;
    ddMultBy4: typeof ddMultBy4_;
    ddDivBy2: typeof ddDivBy2_;
    ddMultByNeg2: typeof ddMultByNeg2_;
    ddMultByNeg4: typeof ddMultByNeg4_;
    ddMin: typeof ddMin_;
    ddMax: typeof ddMax_;
    ddDivDdWithError: typeof ddDivDdWithError_;
    divWithErr: typeof divWithErr_;
    sqrtWithErr: typeof sqrtWithErr_;
    parseDouble: typeof parseDouble_;
    parseDoubleDetailed: typeof parseDoubleDetailed_;
    isBitAligned: typeof isBitAligned_;
    msbExponent: typeof msbExponent_;
    lsbExponent: typeof lsbExponent_;
    bitLength: typeof bitLength_;
    doubleToBinaryString: typeof doubleToBinaryString_;
    doubleToOctets: typeof doubleToOctets_;
    getHighestSetBit: typeof getHighestSetBit_;
    getLowestSetBit: typeof getLowestSetBit_;
    exponent: typeof exponent_;
    significand: typeof significand_;
};
export { operators };
export { fastTwoDiff, fastTwoSum, split, twoDiff, twoProduct, doubleDivDouble, twoSum, reduceSignificand, doubleSqrt, ddSqrt, ddAbs, ddAddDouble, ddAddDd, ddProduct, ddSum, ddCompare, ddDiffDd, ddMultDouble1, ddMultDouble2, ddMultDd, ddDivDouble, ddDivDd, ddNegativeOf, ddSign, ddMultBy2, ddMultBy4, ddDivBy2, ddMultByNeg2, ddMultByNeg4, ddMin, ddMax, ddDivDdWithError, divWithErr, sqrtWithErr, parseDouble, parseDoubleDetailed, isBitAligned, msbExponent, lsbExponent, bitLength, doubleToBinaryString, doubleToOctets, getHighestSetBit, getLowestSetBit, exponent, significand };

import { ddMin } from './double-double/binary/dd-min';
import { ddMax } from './double-double/binary/dd-max';
import { ddSqrt } from './double-double/unary/dd-sqrt';
import { doubleSqrt } from './double-mixed-double-double/double-sqrt';
import { sqrtWithErr } from './double-with-err/sqrt-with-err';
import { ddAbs } from './double-double/unary/dd-abs';
import { ddAddDouble } from './double-mixed-double-double/dd-add-double';
import { ddAddDd } from './double-double/binary/dd-add-dd';
import { ddProduct } from './double-double/multi/dd-product';
import { ddSum } from './double-double/multi/dd-sum';
import { ddCompare } from './double-double/binary/dd-compare';
import { ddDiffDd } from './double-double/binary/dd-diff-dd';
import { ddMultDouble1, ddMultDouble2 } from './double-mixed-double-double/dd-mult-double';
import { ddMultBy2 } from './double-double/unary/dd-mult-by-2';
import { ddMultBy4 } from './double-double/unary/dd-mult-by-4';
import { ddDivBy2 } from './double-double/unary/dd-div-by-2';
import { ddMultByNeg2 } from './double-double/unary/dd-mult-by-neg-2';
import { ddMultByNeg4 } from './double-double/unary/dd-mult-by-neg-4';
import { ddMultDd } from './double-double/binary/dd-mult-dd';
import { ddDivDouble } from './double-mixed-double-double/dd-div-double';
import { ddDivDd } from './double-double/binary/dd-div-dd';
import { ddNegativeOf } from './double-double/unary/dd-negative-of';
import { ddSign } from './double-double/unary/dd-sign';
import { fastTwoDiff } from './basic/fast-two-diff';
import { fastTwoSum } from './basic/fast-two-sum';
import { split } from './basic/split';
import { twoDiff } from './basic/two-diff';
import { twoProduct } from './basic/two-product';
import { doubleDivDouble } from './double-mixed-double-double/double-div-double';
import { twoSum } from './basic/two-sum';
import { reduceSignificand } from './basic/reduce-significand';
import { parseDouble, parseDoubleDetailed } from './double-representation/parse-double';
import { isBitAligned } from './double-representation/is-bit-aligned';
import { msbExponent } from './double-representation/msb-exponent';
import { lsbExponent } from './double-representation/lsb-exponent';
import { bitLength } from './double-representation/bit-length';
import { exponent } from './double-representation/exponent';
import { significand } from './double-representation/significand';
import { doubleToBinaryString } from './double-representation/double-to-binary-string';
import { doubleToOctets } from './double-representation/double-to-octets';
import { getHighestSetBit, getLowestSetBit } from './double-representation/get-max-set-bit';
import { ddDivDdWithError } from './double-double-with-error/dd-div-dd-with-error';
import { divWithErr } from './double-with-err/div-with-err';
declare const operators: {
    fastTwoDiff: typeof fastTwoDiff;
    fastTwoSum: typeof fastTwoSum;
    split: typeof split;
    twoDiff: typeof twoDiff;
    twoProduct: typeof twoProduct;
    doubleDivDouble: typeof doubleDivDouble;
    twoSum: typeof twoSum;
    reduceSignificand: typeof reduceSignificand;
    doubleSqrt: typeof doubleSqrt;
    ddSqrt: typeof ddSqrt;
    ddAbs: typeof ddAbs;
    ddAddDouble: typeof ddAddDouble;
    ddAddDd: typeof ddAddDd;
    ddProduct: typeof ddProduct;
    ddSum: typeof ddSum;
    ddCompare: typeof ddCompare;
    ddDiffDd: typeof ddDiffDd;
    ddMultDouble1: typeof ddMultDouble1;
    ddMultDouble2: typeof ddMultDouble2;
    ddMultDd: typeof ddMultDd;
    ddDivDouble: typeof ddDivDouble;
    ddDivDd: typeof ddDivDd;
    ddNegativeOf: typeof ddNegativeOf;
    ddSign: typeof ddSign;
    ddMultBy2: typeof ddMultBy2;
    ddMultBy4: typeof ddMultBy4;
    ddDivBy2: typeof ddDivBy2;
    ddMultByNeg2: typeof ddMultByNeg2;
    ddMultByNeg4: typeof ddMultByNeg4;
    ddMin: typeof ddMin;
    ddMax: typeof ddMax;
    ddDivDdWithError: typeof ddDivDdWithError;
    divWithErr: typeof divWithErr;
    sqrtWithErr: typeof sqrtWithErr;
    parseDouble: typeof parseDouble;
    parseDoubleDetailed: typeof parseDoubleDetailed;
    isBitAligned: typeof isBitAligned;
    msbExponent: typeof msbExponent;
    lsbExponent: typeof lsbExponent;
    bitLength: typeof bitLength;
    doubleToBinaryString: typeof doubleToBinaryString;
    doubleToOctets: typeof doubleToOctets;
    getHighestSetBit: typeof getHighestSetBit;
    getLowestSetBit: typeof getLowestSetBit;
    exponent: typeof exponent;
    significand: typeof significand;
};
export { operators };
export { fastTwoDiff, fastTwoSum, split, twoDiff, twoProduct, doubleDivDouble, twoSum, reduceSignificand, doubleSqrt, ddSqrt, ddAbs, ddAddDouble, ddAddDd, ddProduct, ddSum, ddCompare, ddDiffDd, ddMultDouble1, ddMultDouble2, ddMultDd, ddDivDouble, ddDivDd, ddNegativeOf, ddSign, ddMultBy2, ddMultBy4, ddDivBy2, ddMultByNeg2, ddMultByNeg4, ddMin, ddMax, ddDivDdWithError, divWithErr, sqrtWithErr, parseDouble, parseDoubleDetailed, isBitAligned, msbExponent, lsbExponent, bitLength, doubleToBinaryString, doubleToOctets, getHighestSetBit, getLowestSetBit, exponent, significand };
